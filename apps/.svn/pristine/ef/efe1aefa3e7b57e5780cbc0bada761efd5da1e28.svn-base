import React, { Component } from 'react';
import { merge } from 'lodash';
import { translate } from "react-translate";
import XAddText from '../../../../common/ZNOComponents/XAddText';
import { getSize, setElementStyles, setElementToHorizontalCenter } from '../../../../common/utils/helper';
import { workSpacePrecent, sideBarWidth, spreadTypes } from '../../contants/strings';
import XDrop from '../../../../common/ZNOComponents/XDrop';
import Loading from '../Loading';

import Spread from '../Spread';
import OutInSide from '../OutInSide';
import './index.scss';

class WorkSpace extends Component {
  constructor(props) {
    super(props);

    // 初始化state
    this.state = this.initWorkspace();
  }

  /**
   * 挂载后, 就加上onresize事件.
   */
  componentDidMount() {
    // 当窗口大小改变时, 重新设置workspace的大小.
    this.addResizeEvent();
  }

  /**
   * 在卸载之前, 取消onresize事件.
   */
  componentWillUnmount() {
    window.onresize = null;
  }

  /**
   * 根据props的值, 初始化state的值.
   */
  initWorkspace() {
    const { spreads } = this.props;
    const spreadOptions = this.formatSpreadOptions(spreads);
    const state = {
      spreadOptions,
      currentSpread: spreadOptions.length ? spreadOptions[0] : {}
    };

    return state;
  }

  formatSpreadOptions(spreads) {
    const { t } = this.props;
    const spreadsOptions = [];
    if (!spreads || !spreads.length) {
      return spreadsOptions;
    }

    spreads.forEach((s) => {
      const pageSize = getSize();

      let wsPrecent;
      switch (s.type) {
        case spreadTypes.coverPage:
          wsPrecent = workSpacePrecent.big;
          break;
        case spreadTypes.innerPage:
          wsPrecent = workSpacePrecent.sm;
          break;
        default:
          break;
      }

      if (wsPrecent) {
        const workspaceWidth = (pageSize.width - sideBarWidth) * wsPrecent;
        const rate = workspaceWidth / s.width;
        const left = sideBarWidth + (((pageSize.width - sideBarWidth) - workspaceWidth) / 2);
        const opt = merge({}, s, {
          width: s.width * rate,
          height: s.height * rate,
          bleedTop: s.bleedTop * rate,
          bleedBottom: s.bleedBottom * rate,
          bleedLeft: s.bleedLeft * rate,
          bleedRight: s.bleedRight * rate,
          spineThicknessWidth: s.spineThicknessWidth * rate,
          wrapSize: s.wrapSize * rate,
          textInCenter: s.textInCenter ? t(s.textInCenter) : ''
        });

        spreadsOptions.push({
          rate,
          pageSize,
          workspaceWidth,
          spreadOptions: opt,
          originalOptions: s,
          left
        });
      }
    });

    return spreadsOptions;
  }

  getCurrentSpreadIndex() {
    // 查找当前显示的是那一个spread
    const index = this.state.spreadOptions.findIndex((v) => {
      return v.spreadOptions.id === this.state.currentSpread.spreadOptions.id;
    });

    return index;
  }

  /**
   * onresize的处理函数, 更改state.
   */
  addResizeEvent() {
    let timer = null;

    window.onresize = () => {
      clearTimeout(timer);
      timer = setTimeout(() => {
        const index = this.getCurrentSpreadIndex();
        const state = this.initWorkspace();

        // resize后, 继续显示当前的spread, 而不是调到默认的spread中.
        if (index !== -1) {
          state.currentSpread = state.spreadOptions[index];
        }
        this.setState(state);
      }, 500);
    };
  }

  onAddText() {
    alert('add text');
  }

  /**
   * 点击查看封面页时.
   */
  onOutside() {
    const index = this.getCurrentSpreadIndex();
    const spreadOptions = this.state.spreadOptions;
    if (spreadOptions && spreadOptions.length && !Object.is(index, 0)) {
      this.setState({
        currentSpread: spreadOptions[0]
      });
    }
  }

  /**
   * 点击查看里面页时.
   */
  onInside() {
    const index = this.getCurrentSpreadIndex();
    const spreadOptions = this.state.spreadOptions;
    if (spreadOptions && spreadOptions.length > 1 && !Object.is(index, 1)) {
      this.setState({
        currentSpread: spreadOptions[1]
      });
    }
  }

  onSpreadClick() {
    alert('click on spread');
  }

  onSpreadDroped(event) {
    const { boundUploadedImagesActions } = this.props;
    event.stopPropagation();
    event.preventDefault();
    const data = JSON.parse(event.dataTransfer.getData('drag'));
    boundUploadedImagesActions.updateUploadedImageUsedCount(data.imageId)
    console.log(data);
    event.dataTransfer.clearData();
  }

  render() {
    // t方法是用于本地化, 通过传入的key, 来获取对应的value.
    const { children, t, loadingData } = this.props;

    const workSpaceStyle = {
      width: `${this.state.currentSpread.workspaceWidth}px`,
      left: `${this.state.currentSpread.left}px`,
      position: 'absolute'
    };
    return (
      <section className="work-space" ref="workSpace" style={workSpaceStyle}>
        {children}
        <div className="btn-list">
          {/* add text 按钮 */}
          <XAddText text={t('ADD_TEXT')} onClicked={this.onAddText.bind(this)}/>
        </div>

        <div className="image-editor">
          <Loading
            isShow={loadingData.isShow}
            isModalShow={loadingData.isModalShow}
          />
          <XDrop onDroped={ this.onSpreadDroped.bind(this) }>
            <Spread spreadId={this.state.currentSpread.spreadOptions.id}
                    onClicked={this.onSpreadClick.bind(this)}
                    options={this.state.currentSpread.spreadOptions}/>
          </XDrop>
        </div>
        <div className="btn-list m-b-66">
          <OutInSide leftText={t('OUTSIDE')}
                     rightText={t('INSIDE')}
                     onLeftClicked={this.onOutside.bind(this)}
                     onRightClicked={this.onInside.bind(this)}
          />
        </div>
      </section>
    );
  }
}

// 要导出的一个translate模块.
// - 第一个括号里的参数对应的是资源文件中定义的.
// - 第一个括号里的参数对应的是你要导出的组件名.
export default translate('WorkSpace')(WorkSpace);
