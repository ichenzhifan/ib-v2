import React, { Component, PropTypes } from 'react';
import { merge, isEqual } from 'lodash';
import { drawImage, clear } from '../../utils/draw';
import classNames from 'classnames';
import './index.scss';

export default class XTextElement extends Component {
  constructor(props) {
    super(props);
  }

  /**
   * 性能提升, 只要宽高和图片的属性发生变化时才重新渲染.
   * @param nextProps
   * @param nextState
   */
  shouldComponentUpdate(nextProps, nextState) {
    const isUpdated = !isEqual({
      width: this.props.width,
      height: this.props.height,
      options: this.props.options
    }, {
      width: nextProps.width,
      height: nextProps.height,
      options: nextProps.options
    });

    return isUpdated;
  }

  /**
   * 渲染图片.
   */
  componentDidUpdate() {
    const { canvasId, width, height, options } = this.props;
    const { textUrl } = options;

    // 加载图片并绘制.
    clear(canvasId, 0, 0, width, height);
    drawImage(canvasId, textUrl, 0, 0, null, width, height);
  }

  render() {
    const { className, children, canvasId, width, height, options } = this.props;
    const customClass = classNames('x-text-element', className);
    // 定位textElement
    const styles = {
      top: `${options.top}px`,
      left: `${options.left}px`
    };
    return (
      <div className={customClass} style={styles}>
        <canvas id={canvasId} width={width} height={height}></canvas>
        {children}
      </div>
    );
  }
}

XTextElement.propTypes = {
  className: PropTypes.string,

  // 画布的宽和高
  width: PropTypes.number.isRequired,
  height: PropTypes.number.isRequired,

  // 线的位置信息
  options: PropTypes.shape({
    textUrl: PropTypes.string.isRequired,
    lineWidth: PropTypes.number,
    top: PropTypes.number,
    left: PropTypes.number
  }).isRequired
};
