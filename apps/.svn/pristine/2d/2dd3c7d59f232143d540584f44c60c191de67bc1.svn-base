import React, { Component, PropTypes } from 'react';
import { merge } from  'lodash';
import { getBorderLinesXY, getWrapLinesXY, getSpineThicknessLinesXY } from '../../../../common/utils/line';
import { makeId } from '../../../../common/utils/math';
import { getDefaultCrop } from '../../../../common/utils/crop';
import classNames from 'classnames';
import { getWrapBoxes } from '../../../../common/utils/draw';
import XElements from '../../../../common/ZNOComponents/XElements';
import XBGElement from '../../../../common/ZNOComponents/XBGElement';
import XPhotoElement from '../../../../common/ZNOComponents/XPhotoElement';
import XTextElement from '../../../../common/ZNOComponents/XTextElement';
import XHandler from '../../../../common/ZNOComponents/XHandler';
import XLines from '../../../../common/ZNOComponents/XLines';
import XBoxes from '../../../../common/ZNOComponents/XBoxes';

import './index.scss';

export default class Spread extends Component {
  constructor(props) {
    super(props);

    const state = this.initSpread(this.props);
    this.state = state;
  }

  componentWillReceiveProps(nextProps) {
    this.setState(this.initSpread(nextProps));
  }

  initSpread(props) {
    const { options } = props;
    const { width, height } = options;

    // 获取各种线的坐标.
    const lineWidth = 1;
    const borderLines = getBorderLinesXY(width, height, lineWidth, '#bcbcbc', true, 10);

    // 包括包边和出血区域在当前的case中, 因为没有设计出血线.
    const wrapLines = getWrapLinesXY(width, height, options.wrapSize + options.bleedTop, lineWidth, '#95989a');
    const spineThicknessLines = getSpineThicknessLinesXY(width, height, options.spineThicknessWidth, lineWidth, '#bcbcbc', true, 12);

    // photo元素的options设置
    // todo: 使用真实的原图宽高
    const cropParams = getDefaultCrop(5000, 3335, width, height);
    const url = 'http://www.zno.com/imageBox/liveUpdateCropImage.ep?encImgId=KBz2bsxvCmKowdkVWocLnw%253D%253D';
    const photoOptions = merge({}, options, {
      lineWidth,
      // todo, 使用真实的地址替换.
      imageUrl: `${url}&px=${cropParams.px}&py=${cropParams.py}&pw=${cropParams.pw}&ph=${cropParams.ph}&width=${parseInt(width)}&height=${parseInt(height)}&rotation=0`
    }, {
      wrapSize: options.wrapSize + options.bleedTop,
      bleedTop: 0,
      bleedBottom: 0,
      bleedLeft: 0,
      bleedRight: 0
    });

    // 包边区域元素的options设置
    const boxesOptions = merge({}, options, {
      wrapSize: options.wrapSize + options.bleedTop,
      bleedTop: 0,
      bleedBottom: 0,
      bleedLeft: 0,
      bleedRight: 0
    });

    // 获取上下左右四个包边区域的坐标和宽高信息
    const boxes = getWrapBoxes(width,
      height,
      'rgba(0, 0, 0, 0.05)',
      boxesOptions.bleedTop,
      boxesOptions.bleedBottom,
      boxesOptions.bleedLeft,
      boxesOptions.bleedRight,
      boxesOptions.wrapSize,
      lineWidth);

    const state = {
      lineWidth,
      borderLines,
      wrapLines,
      spineThicknessLines,
      photoOptions,
      boxesOptions,
      boxes
    };
    console.log('spread state: ', state);
    return state;
  }

  render() {
    const { className, spreadId, options } = this.props;
    const { width, height, bgColor, textInCenter } = options;

    const customClass = classNames('spread', className);

    // spread的样式
    const styles = {
      width: `${width}px`,
      height: `${height}px`
    };


    return (
      <div className={customClass} style={styles}>
        <XElements>
          {/* 背景元素, 设置画布背景 */}
          <XBGElement canvasId={makeId(spreadId)}
                      bgColor={bgColor}
                      width={width}
                      height={height}
                      textInCenter={textInCenter}
          />

          {/* 图片元素, 用于渲染图片 */}
          <XPhotoElement canvasId={makeId(spreadId)}
                         width={width}
                         height={height}
                         options={this.state.photoOptions}>

            {/* 控制元素, 用于控制渲染出来的图片, 如缩放, 旋转等 */}
            <XHandler />
          </XPhotoElement>

          {/* 文本元素, 用于渲染文本 */}
          <XTextElement>

            {/* 控制元素, 用于控制渲染出来的文本, 如缩放, 旋转等 */}
            <XHandler />
          </XTextElement>

        </XElements>

        {/* 四个包边区域 */}
        <XBoxes canvasId={makeId(spreadId)}
                width={width}
                height={height}
                boxes={this.state.boxes}
        />

        {/* 线条元素, 用于绘制各种线条 */}
        <XLines canvasId={makeId(spreadId)}
                width={width}
                height={height}
                lines={[...this.state.borderLines, ...this.state.wrapLines, ...this.state.spineThicknessLines]}
        />
      </div>
    );
  }
}

Spread.propTypes = {
  spreadId: PropTypes.string.isRequired,
  options: PropTypes.shape({
    textInCenter: PropTypes.string,
    bgColor: PropTypes.string,
    width: PropTypes.number,
    height: PropTypes.number,
    bleedTop: PropTypes.number,
    bleedBottom: PropTypes.number,
    bleedLeft: PropTypes.number,
    bleedRight: PropTypes.number,
    spineThicknessWidth: PropTypes.number,
    wrapSize: PropTypes.number,
  }).isRequired,
  onClicked: PropTypes.func,
  className: PropTypes.string
};
