import { merge, get, set, pick, forEach, isEmpty } from 'lodash';
import qs from 'qs';
import { API_SUCCESS, CHANGE_PROJECT_SETTING } from '../contants/actionTypes';
import { GET_PROJECT_DATA, GET_SPEC_DATA } from '../contants/apiUrl';
import x2jsInstance from '../utils/xml2js';

// 从url附加的参数信息中获取用户project的一些初始属性
const queryStringObj = qs.parse(window.location.search.substr(1));
const initialState = {
  setting: pick(queryStringObj, ['title', 'size', 'product', 'type'])
};

/**
 * 检测setting对象中的属性是否和key对象里面的规则相匹配
 * @param  {[object]}  setting [description]
 * @param  {[object]}  entry   [description]
 * @return {Boolean}         [description]
 */
const isEntryMatched = (setting, entry) => {
  let isMatched = true;

  forEach(entry.key, (value, key) => {
    if (value.indexOf(setting[key]) === -1 && value.indexOf('*') === -1) {
      isMatched = false;
      return false;
    }
  });

  return isMatched;
};

/**
 * 根据当前的projectSetting对象，从configurableOptionArray中
 * 获取其他的setting属性（取默认值，若当前值在可选项中，则不修改）
 * @param  {[object]} setting                 [description]
 * @param  {[array]} configurableOptionArray [description]
 * @return {[object]}                         [description]
 */
const getProjectSetting = (setting, configurableOptionArray) => {
  if (isEmpty(setting) || !configurableOptionArray) {
    return {};
  }
  const outSetting = merge({}, setting);
  const sortedConfigurableOptionArray = configurableOptionArray.sort((a, b) => {
    return a.keyPattern.length - b.keyPattern.length;
  });

  sortedConfigurableOptionArray.forEach((optionMap) => {
    optionMap.entry.forEach((entry) => {
      const isMatched = isEntryMatched(setting, entry);

      if (isMatched) {
        const defaultValue = entry.defaultValue;
        const oldValue = outSetting[optionMap.id];
        if (defaultValue && entry.value.indexOf(oldValue) === -1) {
          outSetting[optionMap.id] = defaultValue;
        }
      }
    });
  });

  return outSetting;
};


/**
 * 根据当前用户选择的产品，从spec中获取对应的project初始属性
 * @param  {[object]} projectObj              [project的初始属性]
 * @param  {[array]} configurableOptionArray  [spec中解析得到的新数组]
 * @return {[object]}                         [完整的projectSetting对象]
 */
const getDefaultProjectSetting = (projectObj, configurableOptionArray) => {
  const outObj = merge({}, projectObj);
  const singleKeyPatternOptionArray = configurableOptionArray.filter((obj) => {
    return obj.keyPattern.length === 1;
  });

  singleKeyPatternOptionArray.forEach((optionMap) => {
    optionMap.entry.forEach((entry) => {
      entry.value.forEach((v) => {
        if (v === projectObj[optionMap.id]) {
          const onlyKeyPattern = optionMap.keyPattern[0];
          if (!outObj[onlyKeyPattern]) {
            outObj[onlyKeyPattern] = entry.key[onlyKeyPattern][0];
          }
        }
      });
    });
  });

  const setting = getProjectSetting(outObj, configurableOptionArray);

  return merge({}, outObj, setting);
};


/**
 * 根据当前的setting生成对应的project参数选项
 * @param  {[object]} setting                 [description]
 * @param  {[array]} configurableOptionArray [description]
 * @return {[object]}                         [返回一个hashMap]
 */
const generateOptionMapByNewSetting = (setting, configurableOptionArray) => {
  const outMap = {};
  configurableOptionArray.forEach((optionMap) => {
    optionMap.entry.forEach((entry) => {
      const isMatched = isEntryMatched(setting, entry);

      if (isMatched) {
        outMap[optionMap.id] = [...entry.value];
      }
    });
  });

  return outMap;
};

/**
 * 将configurableOptionMap里面的数据转化为js对象
 * @param  {[object]} specObj [description]
 * @return {[array]}          [返回一个新的数组]
 */
const prepareConfigurableOptionMap = (specObj) => {
  const outArray = [];
  const configurableOptionMap = get(specObj, 'configurableOptionMap.optionMap');

  configurableOptionMap.forEach((optionMap) => {
    const keyPatternArray = optionMap.keyPattern.split('-');

    const newOptionMap = merge({}, optionMap, {
      keyPattern: keyPatternArray,
      entry: null
    });

    let entryList = [];
    if (Array.isArray(optionMap.entry)) {
      entryList = optionMap.entry;
    } else {
      entryList = [optionMap.entry];
    }

    entryList.forEach((entry) => {
      const keyArray = entry.key.split('-');
      const newKey = {};

      keyPatternArray.forEach((key, index) => {
        let keyByKeyPattern = keyArray[index];
        if (keyByKeyPattern.startsWith('[') && keyByKeyPattern.endsWith(']')) {
          keyByKeyPattern = keyByKeyPattern
            .substring(1, keyByKeyPattern.length - 1).split(',');
        } else {
          keyByKeyPattern = [keyByKeyPattern];
        }

        newKey[key] = keyByKeyPattern;
      });

      const newEntry = merge(entry, {
        key: newKey,
        value: entry.value.split(',')
      });

      if (!newOptionMap.entry) {
        newOptionMap.entry = [];
      }

      newOptionMap.entry.push(newEntry);
    });

    outArray.push(newOptionMap);
  });

  return outArray;
};

/**
 * 根据当前的optionMap对象递归找到所有受影响的optionMap
 * @param  {[object]} optionMap               [当前受影响的optionMap]
 * @param  {[array]} configurableOptionArray [从spec解析出来的optionArray]
 * @param  {[array]} resultArray             [存放受影响的optionMap的结果集]
 * @return {[array]}                         [description]
 */
const getAffectedConfigurableOptionArray = (
  optionMap, configurableOptionArray, resultArray
) => {
  configurableOptionArray.forEach((o) => {
    if (o.keyPattern.indexOf(optionMap.id) !== -1) {
      resultArray.push(o);
      getAffectedConfigurableOptionArray(o, configurableOptionArray, resultArray);
    }
  });

  return resultArray;
};

const project = (state = initialState, action) => {
  switch (action.type) {
    case API_SUCCESS: {
      switch (action.api) {
        case GET_PROJECT_DATA: {
          const xmlData = action.response;
          const projectObj = x2jsInstance.xml2js(xmlData).project;

          return merge({}, state, {
            __originalData__: projectObj
          });
        }
        case GET_SPEC_DATA: {
          const xmlData = action.response;
          const specObj = x2jsInstance.xml2js(xmlData)['product-spec'];

          const configurableOptionArray = prepareConfigurableOptionMap(specObj);

          const setting = getDefaultProjectSetting(state.setting, configurableOptionArray);

          const optionMap = generateOptionMapByNewSetting(
            setting, configurableOptionArray
          );

          return merge({}, state, {
            configurableOptionArray,
            setting,
            optionMap
          });
        }
        default:
          return state;
      }
    }
    case CHANGE_PROJECT_SETTING: {
      const newSetting = action.setting;
      if (!isEmpty(newSetting)) {
        const shadowAffectedSettingKeys = Object.keys(newSetting);
        const shadowAffectedConfigurableOptionArray = [];
        const { configurableOptionArray } = state;
        configurableOptionArray.forEach((optionMap) => {
          forEach(shadowAffectedSettingKeys, (settingKey) => {
            if (optionMap.keyPattern.indexOf(settingKey) !== -1) {
              shadowAffectedConfigurableOptionArray.push(optionMap);
              return false;
            }
          });
        });

        const deepAffectedConfigurableOptionArray =
          shadowAffectedConfigurableOptionArray.concat([]);
        shadowAffectedConfigurableOptionArray.forEach((optionMap) => {
          getAffectedConfigurableOptionArray(
            optionMap,
            configurableOptionArray,
            deepAffectedConfigurableOptionArray
          );
        });


        const mergedSetting = merge({}, state.setting, newSetting);

        const setting = getProjectSetting(
          mergedSetting, deepAffectedConfigurableOptionArray
        );

        const allNewSetting = merge({}, mergedSetting, setting);

        const optionMap = generateOptionMapByNewSetting(
          allNewSetting, configurableOptionArray
        );

        return set(merge({}, state, {
          setting: allNewSetting
        }), 'optionMap', optionMap);
      }
      return state;
    }
    default:
      return state;
  }
};

export default project;
