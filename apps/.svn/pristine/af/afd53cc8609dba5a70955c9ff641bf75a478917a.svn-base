import { merge, get, pick, forEach } from 'lodash';
import qs from 'qs';
import { API_SUCCESS } from '../contants/actionTypes';
import { GET_PROJECT_DATA, GET_SPEC_DATA } from '../contants/apiUrl';
import x2jsInstance from '../utils/xml2js';

// 从url附加的参数信息中获取用户project的一些初始属性
const queryStringObj = qs.parse(window.location.search.substr(1));
const initialState = {
  settings: pick(queryStringObj, ['title', 'size', 'product'])
};

/**
 * 根据当前用户选择的产品，从spec中获取对应的project初始属性
 * @param  {[object]} projectObj              [project的初始属性]
 * @param  {[array]} configurableOptionArray  [spec中解析得到的新数组]
 * @return {[object]}                         [完整的projectSettings对象]
 */
const getDefaultProjectProperties = (projectObj, configurableOptionArray) => {
  const outObj = merge({}, projectObj);
  const singleKeyPatternOptionArray = configurableOptionArray.filter((obj) => {
    return obj.keyPattern.length === 1;
  });

  singleKeyPatternOptionArray.forEach((optionMap) => {
    optionMap.entry.forEach((entry) => {
      entry.value.forEach((v) => {
        if (v === projectObj[optionMap.id]) {
          const onlyKeyPattern = optionMap.keyPattern[0];
          outObj[onlyKeyPattern] = entry.key[onlyKeyPattern][0];
        }
      });
    });
  });

  const sortedConfigurableOptionArray = configurableOptionArray.sort((a, b) => {
    return a.keyPattern.length - b.keyPattern.length;
  });

  sortedConfigurableOptionArray.forEach((optionMap) => {
    const keyPatternArray = optionMap.keyPattern;
    optionMap.entry.forEach((entry, i) => {
      let isMatched = true;

      forEach(entry.key, (value, key) => {
        if (value.indexOf(outObj[key]) === -1 && value.indexOf('*') === -1) {
          isMatched = false;
        }
      });

      if (isMatched && !outObj[optionMap.id]) {
        const defaultValue = entry.defaultValue;
        if (defaultValue) {
          outObj[optionMap.id] = defaultValue;
        }
      }
    });
  });

  return outObj;
};

/**
 * 将configurableOptionMap里面的数据转化为js对象
 * @param  {[object]} specObj [description]
 * @return {[array]}          [返回一个新的数组]
 */
const prepareConfigurableOptionMap = (specObj) => {
  const outArray = [];
  const configurableOptionMap = get(specObj, 'configurableOptionMap.optionMap');

  configurableOptionMap.forEach((optionMap) => {
    const keyPatternArray = optionMap.keyPattern.split('-');

    const newOptionMap = merge({}, optionMap, {
      keyPattern: keyPatternArray,
      entry: null
    }) ;

    optionMap.entry.forEach((entry) => {
      const keyArray = entry.key.split('-');
      const newKey = {};

      keyPatternArray.forEach((key, index) => {
        let keyByKeyPattern = keyArray[index];
        if (keyByKeyPattern.startsWith('[') && keyByKeyPattern.endsWith(']')) {
          keyByKeyPattern = keyByKeyPattern
            .substring(1, keyByKeyPattern.length - 1).split(',');
        } else {
          keyByKeyPattern = [keyByKeyPattern];
        }

        newKey[key] = keyByKeyPattern;
      });

      const newEntry = merge(entry, {
        key: newKey,
        value: entry.value.split(',')
      });

      if (!newOptionMap.entry) {
        newOptionMap.entry = [];
      }

      newOptionMap.entry.push(newEntry);
    });

    outArray.push(newOptionMap);
  });

  return outArray;
};

const project = (state = initialState, action) => {
  switch (action.type) {
    case API_SUCCESS: {
      switch (action.api) {
        case GET_PROJECT_DATA: {
          const xmlData = action.response;
          const projectObj = x2jsInstance.xml2js(xmlData).project;

          return merge({}, state, {
            __originalData__: projectObj
          });
        }
        case GET_SPEC_DATA: {
          const xmlData = action.response;
          const specObj = x2jsInstance.xml2js(xmlData)['product-spec'];

          const configurableOptionArray = prepareConfigurableOptionMap(specObj);

          const settings = getDefaultProjectProperties(state.settings, configurableOptionArray);

          return merge({}, state, {
            configurableOptionArray,
            settings
          });
        }
        default:
          return state;
      }
    }
    default:
      return state;
  }
};

export default project;
