import React, { Component } from 'react';
import { merge } from 'lodash';
import { translate } from "react-translate";
import XAddText from '../../../../common/ZNOComponents/XAddText';
import { getSize, setElementStyles, setElementToHorizontalCenter } from '../../../../common/utils/helper';
import { workSpacePrecent, sideBarWidth } from '../../contants/strings';
import XDrop from '../../../../common/ZNOComponents/XDrop';

import Spread from '../Spread';
import OutInSide from '../OutInSide';
import './index.scss';

class WorkSpace extends Component {
  constructor(props) {
    super(props);

    // 初始化state
    this.state = this.initWorkspace();
  }

  /**
   * 挂载后, 就加上onresize事件.
   */
  componentDidMount() {
    // 当窗口大小改变时, 重新设置workspace的大小.
    this.addResizeEvent();
  }

  /**
   * 在卸载之前, 取消onresize事件.
   */
  componentWillUnmount() {
    window.onresize = null;
  }

  /**
   * 根据props的值, 初始化state的值.
   */
  initWorkspace() {
    const { t, options } = this.props;
    const pageSize = getSize();
    const workspaceWidth = (pageSize.width - sideBarWidth) * workSpacePrecent;
    const rate = workspaceWidth / options.width;
    const left = sideBarWidth + (((pageSize.width - sideBarWidth) - workspaceWidth) / 2);
    const spreadOptions = merge({}, options, {
      textInCenter: t('CLICK_TO_ADD_PHOTO'),
      width: options.width * rate,
      height: options.height * rate,
      bleedTop: options.bleedTop * rate,
      bleedBottom: options.bleedBottom * rate,
      bleedLeft: options.bleedLeft * rate,
      bleedRight: options.bleedRight * rate,
      spineThicknessWidth: options.spineThicknessWidth * rate,
      wrapSize: options.wrapSize * rate
    });

    const state = {
      rate,
      pageSize,
      workspaceWidth,
      options,
      spreadOptions,
      left
    };
    console.log('workspace state: ', state);
    return state;
  }

  /**
   * onresize的处理函数, 更改state.
   */
  addResizeEvent() {
    let timer = null;

    window.onresize = () => {
      clearTimeout(timer);
      timer = setTimeout(() => {
        const state = this.initWorkspace();
        this.setState(state);
      }, 500);
    };
  }

  onAddText() {
    alert('add text');
  }

  onOutside() {
    alert('click on outside');
  }

  onInside() {
    alert('click on inside');
  }

  onSpreadClick() {
    alert('click on spread');
  }

  onSpreadDroped(event) {
    event.stopPropagation();
    event.preventDefault();
    const data = JSON.parse(event.dataTransfer.getData('drag'));
    console.log(data);
    event.dataTransfer.clearData();
  }

  render() {
    // t方法是用于本地化, 通过传入的key, 来获取对应的value.
    const { children, t } = this.props;

    const workSpaceStyle = {
      width: `${this.state.workspaceWidth}px`,
      left: `${this.state.left}px`,
      position: 'absolute'
    };
    return (
      <section className="work-space" ref="workSpace" style={workSpaceStyle}>
        {children}
        <div className="btn-list">
          {/* add text 按钮 */}
          <XAddText text={t('ADD_TEXT')} onClicked={this.onAddText.bind(this)}/>
        </div>

        <div className="image-editor">
          <XDrop onDroped={ this.onSpreadDroped.bind(this) }>
            <Spread spreadId="UNIQUE-0"
                    onClicked={this.onSpreadClick.bind(this)}
                    options={opt}/>
          </XDrop>
        </div>
        <div className="btn-list m-b-66">
          <OutInSide leftText={t('OUTSIDE')}
                     rightText={t('INSIDE')}
                     onLeftClicked={this.onOutside.bind(this)}
                     onRightClicked={this.onInside.bind(this)}
          />
        </div>
      </section>
    );
  }
}

// 要导出的一个translate模块.
// - 第一个括号里的参数对应的是资源文件中定义的.
// - 第一个括号里的参数对应的是你要导出的组件名.
export default translate('WorkSpace')(WorkSpace);
