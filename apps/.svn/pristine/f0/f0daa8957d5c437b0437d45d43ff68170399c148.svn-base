import React, { Component } from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { set, get } from 'lodash';
// 导入用于本地化的组件
import { TranslatorProvider } from "react-translate";

import * as specActions from '../../actions/specActions';
import * as projectActions from '../../actions/projectActions';
import * as loginActions from '../../actions/loginActions';

import MainContainer from '../../components/MainContainer';
import PageHeader from '../../components/PageHeader';
import SideBar from '../../components/SideBar';
import WorkSpace from '../../components/WorkSpace';
import UploadModal from '../../components/UploadModal';
import XLoginModal from '../../../../common/ZNOComponents/XLoginModal';

import 'normalize.css';
import './index.scss';


class App extends Component {
  constructor(props) {
    super(props);

    // 定义一些初始化值.
    this.state = {
      modalSwitches: {
        // options设置弹框
        options: false,

        // 登录弹框
        login: false
      }
    };
  }

  /**
   * 显示或关闭modal
   * @param {string} type 待关闭的modal在state中key的值(this.state.modalSwitches).
   * @param {bool} status true/false, modal是显示还是关闭
   */
  toggleModal(type, status) {
    let state = set(this.state, `modalSwitches.${type}`, status);
    this.setState(state);
  }

  handleLogin(){
    // 隐藏login弹框
    this.toggleModal.bind(this, 'login', false);
  }

  render() {
    const {
      translations,
      boundSpecActions,
      boundProjectActions,
      loginActions,
      spec
    } = this.props;


    return (
      <TranslatorProvider translations={ translations }>
        <MainContainer
          className="app"
          boundSpecActions={boundSpecActions}
          boundProjectActions={boundProjectActions}
        >
          <PageHeader onLoginHandle={this.toggleModal.bind(this, 'login', true)}
                      onOpen={this.toggleModal.bind(this, 'options', true)}/>

          <SideBar />

          <WorkSpace >
            {/* 显示弹窗 */}
            <input
              type="button"
              className="cursor-p"
              value="显示弹窗"
              onClick={this.toggleModal.bind(this, 'options', true)}
            />

          </WorkSpace>

          <UploadModal
            onClosed={this.toggleModal.bind(this, 'options', false)}
            opened={this.state.modalSwitches.options}
          />

          <XLoginModal
            loginActions={loginActions}
            onClosed={this.toggleModal.bind(this, 'login', false)}
            opened={this.state.modalSwitches.login}
          />

        </MainContainer>
      </TranslatorProvider>
    );
  }
}

// 包装 component ，注入 dispatch 和 state 到其默认的 connect(select)(App) 中；
const mapStateToProps = state => ({});

const mapDispatchToProps = dispatch => ({
  boundSpecActions: bindActionCreators(specActions, dispatch),
  boundProjectActions: bindActionCreators(projectActions, dispatch),
  loginActions: bindActionCreators(loginActions, dispatch)
});

export default connect(mapStateToProps, mapDispatchToProps)(App);
