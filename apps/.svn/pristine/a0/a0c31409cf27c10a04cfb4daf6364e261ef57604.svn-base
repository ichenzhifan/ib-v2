import React, { Component, PropTypes } from 'react';
import { get } from 'lodash';
import ConfirmModal from '../../components/ConfirmModal';
import ImageEditModal from '../../../../common/ZNOComponents/XImageEditModal';
import HeartBeat from '../../components/HeartBeat';

class MainContainer extends Component {

  constructor(props) {
    super(props);

    this.onImageEditModalCanceled = this.onImageEditModalCanceled.bind(this);
  }

  componentWillMount() {
    const {
      boundSpecActions,
      boundEnvActions,
      boundPriceActions,
      projectTitle,
      projectId
    } = this.props;

    // 获取环境变量, 如各种接口的根路径
    boundEnvActions.getEnv().then(() => {
      boundSpecActions.getSpecData();
      boundEnvActions.getUserInfo();

      // TODO modify the param
      boundPriceActions.getProductPrice('PR', ['GP', '5X5']);
    });
  }

  componentWillReceiveProps(nextProps) {
    const oldUserId = this.props.userId;
    const newUserId = nextProps.userId;

    const {
      boundProjectActions,
      boundEnvActions,
      projectId,
      setting,
      spreadArray,
      imageArray
    } = this.props;
    if (oldUserId !== newUserId) {
      if (projectId !== -1) {
        boundProjectActions.getProjectData(newUserId, projectId);
      } else {
        if (setting.title) {
          boundEnvActions.addAlbum(newUserId, setting.title);
        }

        boundProjectActions.saveProject(
          null,
          newUserId,
          setting,
          spreadArray,
          imageArray
        );
      }
    }

    const oldProjectTitle = this.props.setting.title;
    const newProjectTitle = nextProps.setting.title;
    if (oldProjectTitle !== newProjectTitle) {
      boundEnvActions.getAlbumId(newUserId, newProjectTitle);
    }
  }


  onImageEditModalCanceled() {
    const { boundSystemActions } = this.props;
    boundSystemActions.hideImageEditModal();
  }

  render() {
    const {
      children,
      className,
      confirmData,
      userId,
      imageEditModalData,
      boundSystemActions,
      boundEnvActions
    } = this.props;

    return (
      <div className={className}>
        {children}

        <ConfirmModal
          isShow={confirmData.isShow}
          confirmMessage={confirmData.confirmMessage}
          okButtonText={confirmData.okButtonText}
          cancelButtonText={confirmData.cancelButtonText}
          onOkClick={confirmData.onOkClick}
          onCancelClick={confirmData.onCancelClick}
          onModalClose={boundSystemActions.hideConfirm}
        />

        <ImageEditModal
          {...imageEditModalData}
          onCancelClick={this.onImageEditModalCanceled.bind(this)}
        />

        {
          userId
          ? <HeartBeat userId={userId} keepAlive={boundEnvActions.keepAlive} />
          : null
        }
      </div>
    );
  }
}

MainContainer.propTypes = {
  children: PropTypes.node.isRequired,
  boundSpecActions: PropTypes.object.isRequired,
  boundProjectActions: PropTypes.object.isRequired,
  boundEnvActions: PropTypes.object.isRequired,
  boundSystemActions: PropTypes.object.isRequired,
  projectId: PropTypes.number,
  userId: PropTypes.number,
  albumId: PropTypes.number,
  setting: PropTypes.object,
  spreadArray: PropTypes.array,
  imageArray: PropTypes.array,
  className: PropTypes.string,
  confirmData: PropTypes.object,
  imageEditModalData: PropTypes.object
};


export default MainContainer;
