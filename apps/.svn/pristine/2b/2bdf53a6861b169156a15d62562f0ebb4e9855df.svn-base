import { get, merge } from 'lodash';

/**
 * 将optionGroup转化为可以直接循环使用的对象数组
 * @param  {[object]} specObj [spec]
 * @return {[type]}         [返回一个新的hashMap]
 */
const convertOptionGroupToMap = (specObj) => {
  const outMap = {};
  const optionGroup = get(specObj, 'global.options.optionGroup');
  optionGroup.forEach((obj) => {
    const newArray = obj.option.length ? [...obj.option] : [obj.option];
    outMap[obj.id] = newArray;
  });

  return outMap;
};

/**
 * 将configurableOptionMap里面的数据转化为js对象
 * @param  {[object]} specObj [description]
 * @return {[array]}          [返回一个新的数组]
 */
const prepareConfigurableOptionMap = (specObj) => {
  const outArray = [];
  const configurableOptionMap = get(specObj, 'configurableOptionMap.optionMap');

  configurableOptionMap.forEach((optionMap) => {
    const keyPatternArray = optionMap.keyPattern.split('-');

    const newOptionMap = merge({}, optionMap, {
      keyPattern: keyPatternArray,
      entry: null
    });

    let entryList = [];
    if (Array.isArray(optionMap.entry)) {
      entryList = optionMap.entry;
    } else {
      entryList = [optionMap.entry];
    }

    entryList.forEach((entry) => {
      const keyArray = entry.key.split('-');
      const newKey = {};

      keyPatternArray.forEach((key, index) => {
        let keyByKeyPattern = keyArray[index];
        if (keyByKeyPattern.startsWith('[') && keyByKeyPattern.endsWith(']')) {
          keyByKeyPattern = keyByKeyPattern
            .substring(1, keyByKeyPattern.length - 1).split(',');
        } else {
          keyByKeyPattern = [keyByKeyPattern];
        }

        newKey[key] = keyByKeyPattern;
      });

      const newEntry = merge(entry, {
        key: newKey,
        value: entry.value.split(',')
      });

      if (!newOptionMap.entry) {
        newOptionMap.entry = [];
      }

      newOptionMap.entry.push(newEntry);
    });

    outArray.push(newOptionMap);
  });

  return outArray;
};


export default {
  convertOptionGroupToMap,
  prepareConfigurableOptionMap
};
